{
  "scripts": {
    "android": "./scripts/setup-env.sh && npx react-native run-android",
    "ios": "./scripts/setup-env.sh && npx react-native run-ios", 
    "android:release": "./scripts/setup-env.sh && cd android && ./gradlew assembleRelease",
    "ios:release": "./scripts/setup-env.sh && npx react-native run-ios --configuration Release",
    "setup-env": "./scripts/setup-env.sh",
    "validate-env": "node -e \"console.log('Environment check:', { android: !!process.env.AMAP_ANDROID_API_KEY, ios: !!process.env.AMAP_IOS_API_KEY, web: !!process.env.AMAP_WEB_SERVICE_API_KEY });\"",
    "clean-env": "rm -f .env android/app/src/main/AndroidManifest.xml.backup ios/TrailBlazer/AppDelegate.mm.backup"
  },
  "instructions": {
    "development": [
      "1. Copy .env.example to .env",
      "2. Add your actual AMap API keys to .env", 
      "3. Run 'npm run setup-env' to validate",
      "4. Run 'npm run android' or 'npm run ios'"
    ],
    "production": [
      "1. Ensure .env is never committed to git",
      "2. Set environment variables in your CI/CD system",
      "3. Run setup-env.sh script before building",
      "4. Use release build commands for production"
    ],
    "ci_cd_setup": {
      "github_actions": "Set AMAP_* as repository secrets",
      "bitrise": "Add environment variables in workflow settings",
      "appcenter": "Configure environment variables in build configuration"
    }
  }
}